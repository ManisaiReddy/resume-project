/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Awards as PrismaAwards } from "@prisma/client";

export class AwardsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AwardsCountArgs, "select">): Promise<number> {
    return this.prisma.awards.count(args);
  }

  async awardsItems<T extends Prisma.AwardsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AwardsFindManyArgs>
  ): Promise<PrismaAwards[]> {
    return this.prisma.awards.findMany<Prisma.AwardsFindManyArgs>(args);
  }
  async awards<T extends Prisma.AwardsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AwardsFindUniqueArgs>
  ): Promise<PrismaAwards | null> {
    return this.prisma.awards.findUnique(args);
  }
  async createAwards<T extends Prisma.AwardsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AwardsCreateArgs>
  ): Promise<PrismaAwards> {
    return this.prisma.awards.create<T>(args);
  }
  async updateAwards<T extends Prisma.AwardsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AwardsUpdateArgs>
  ): Promise<PrismaAwards> {
    return this.prisma.awards.update<T>(args);
  }
  async deleteAwards<T extends Prisma.AwardsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AwardsDeleteArgs>
  ): Promise<PrismaAwards> {
    return this.prisma.awards.delete(args);
  }
}
