/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AwardsService } from "../awards.service";
import { AwardsCreateInput } from "./AwardsCreateInput";
import { Awards } from "./Awards";
import { AwardsFindManyArgs } from "./AwardsFindManyArgs";
import { AwardsWhereUniqueInput } from "./AwardsWhereUniqueInput";
import { AwardsUpdateInput } from "./AwardsUpdateInput";

export class AwardsControllerBase {
  constructor(protected readonly service: AwardsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Awards })
  async createAwards(@common.Body() data: AwardsCreateInput): Promise<Awards> {
    return await this.service.createAwards({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Awards] })
  @ApiNestedQuery(AwardsFindManyArgs)
  async awardsItems(@common.Req() request: Request): Promise<Awards[]> {
    const args = plainToClass(AwardsFindManyArgs, request.query);
    return this.service.awardsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Awards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async awards(
    @common.Param() params: AwardsWhereUniqueInput
  ): Promise<Awards | null> {
    const result = await this.service.awards({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Awards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAwards(
    @common.Param() params: AwardsWhereUniqueInput,
    @common.Body() data: AwardsUpdateInput
  ): Promise<Awards | null> {
    try {
      return await this.service.updateAwards({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Awards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAwards(
    @common.Param() params: AwardsWhereUniqueInput
  ): Promise<Awards | null> {
    try {
      return await this.service.deleteAwards({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
