/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Work as PrismaWork } from "@prisma/client";

export class WorkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WorkCountArgs, "select">): Promise<number> {
    return this.prisma.work.count(args);
  }

  async works<T extends Prisma.WorkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkFindManyArgs>
  ): Promise<PrismaWork[]> {
    return this.prisma.work.findMany<Prisma.WorkFindManyArgs>(args);
  }
  async work<T extends Prisma.WorkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkFindUniqueArgs>
  ): Promise<PrismaWork | null> {
    return this.prisma.work.findUnique(args);
  }
  async createWork<T extends Prisma.WorkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkCreateArgs>
  ): Promise<PrismaWork> {
    return this.prisma.work.create<T>(args);
  }
  async updateWork<T extends Prisma.WorkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkUpdateArgs>
  ): Promise<PrismaWork> {
    return this.prisma.work.update<T>(args);
  }
  async deleteWork<T extends Prisma.WorkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkDeleteArgs>
  ): Promise<PrismaWork> {
    return this.prisma.work.delete(args);
  }
}
